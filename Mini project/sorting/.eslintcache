[{"C:\\Users\\Asus\\Desktop\\Mini project\\sorting\\src\\App.js":"1","C:\\Users\\Asus\\Desktop\\Mini project\\sorting\\src\\index.js":"2","C:\\Users\\Asus\\Desktop\\Mini project\\sorting\\src\\SortingAlgorithms\\InsertionSort.js":"3","C:\\Users\\Asus\\Desktop\\Mini project\\sorting\\src\\SortingAlgorithms\\BubbleSort.js":"4","C:\\Users\\Asus\\Desktop\\Mini project\\sorting\\src\\SortingVisualizer\\SortingVisualizer.jsx":"5"},{"size":208,"mtime":1606209781800,"results":"6","hashOfConfig":"7"},{"size":147,"mtime":1606212623644,"results":"8","hashOfConfig":"7"},{"size":657,"mtime":1606210934743,"results":"9","hashOfConfig":"7"},{"size":556,"mtime":1606214395339,"results":"10","hashOfConfig":"7"},{"size":6170,"mtime":1606214615223,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1oa18z7",{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"16","messages":"17","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},"C:\\Users\\Asus\\Desktop\\Mini project\\sorting\\src\\App.js",[],"C:\\Users\\Asus\\Desktop\\Mini project\\sorting\\src\\index.js",[],"C:\\Users\\Asus\\Desktop\\Mini project\\sorting\\src\\SortingAlgorithms\\InsertionSort.js",["23","24"],"C:\\Users\\Asus\\Desktop\\Mini project\\sorting\\src\\SortingAlgorithms\\BubbleSort.js",[],"C:\\Users\\Asus\\Desktop\\Mini project\\sorting\\src\\SortingVisualizer\\SortingVisualizer.jsx",["25","26","27","28"],"import React from 'react'\r\nimport './SortingVisualizer.css'\r\nimport InsertionSort from '../SortingAlgorithms/InsertionSort'\r\nimport SelectionSort from '../SortingAlgorithms/SelectionSort'\r\nimport BubbleSort from '../SortingAlgorithms/BubbleSort'\r\nimport GetQuickSortAnimation from '../SortingAlgorithms/QuickSort'\r\n\r\nconst NORMAL_COLOR = '#30ab27';\r\nconst CHANGED_COLOR = '#51ff00';\r\nconst AFTER_CHANGE_COLOR = '#ff5733';\r\n\r\nvar abort = false;\r\n\r\nexport default class SortingVisualizer extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            arrayToSort: [],\r\n            prevChanged: [],\r\n            numberOfItems: 100,\r\n            delay: 10\r\n        };\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.resetArray();\r\n    }\r\n\r\n    resetArray(){\r\n        const arrayToSort = [];\r\n        const prevChanged = [];\r\n        for (let i = 0; i < this.state.numberOfItems; i++) {\r\n            arrayToSort.push(this.RandomIntBetweenRange(5, 1000));\r\n        }\r\n        this.setState({ arrayToSort, prevChanged });\r\n        abort = false;\r\n    }\r\n    \r\n    generateNewArray(){\r\n        abort = true;\r\n        this.resetArray();\r\n    }\r\n\r\n    async SortArray(algo){\r\n        let sortedArrayAnim = algo(this.state.arrayToSort);\r\n        let arrayToSort = this.state.arrayToSort;\r\n        let prevChanged = this.state.prevChanged;\r\n\r\n        for (let index = 0; index < sortedArrayAnim.length; index++) {\r\n            if(this.abort){\r\n                console.log(abort);\r\n                return null;\r\n            }\r\n            const [i,j] = sortedArrayAnim[index];\r\n\r\n            let temp = arrayToSort[i];\r\n            arrayToSort[i] = arrayToSort[j];\r\n            arrayToSort[j] = temp;\r\n        \r\n            prevChanged.push(i,j);\r\n\r\n            if(index == sortedArrayAnim.length - 1){\r\n                prevChanged.push(arrayToSort.length + 1, arrayToSort.length + 1);\r\n                this.setState({prevChanged});\r\n            }\r\n\r\n            this.setState({ arrayToSort,prevChanged });\r\n            await sleep(this.state.delay);\r\n        }\r\n    }\r\n\r\n    async selectionSort(){\r\n        let sortedArrayAnim = SelectionSort(this.state.arrayToSort);\r\n        let arrayToSort = this.state.arrayToSort;\r\n        let prevChanged = this.state.prevChanged;\r\n\r\n        //loop through all the animations\r\n        for (let index = 0; index < sortedArrayAnim.length; index++) {\r\n            const [i,j, swap] = sortedArrayAnim[index];\r\n\r\n            //change array\r\n            if(swap){\r\n                let temp = arrayToSort[i];\r\n                arrayToSort[i] = arrayToSort[j];\r\n                arrayToSort[j] = temp;\r\n            }\r\n        \r\n            prevChanged.push(i,j);\r\n\r\n            if(index == sortedArrayAnim.length - 1){\r\n                prevChanged.push(arrayToSort.length + 1, arrayToSort.length + 1);\r\n                this.setState({prevChanged});\r\n            }\r\n\r\n            this.setState({ arrayToSort, prevChanged });\r\n                \r\n            await sleep(this.state.delay);\r\n        }\r\n    }\r\n\r\n    handleItemsInputOnChange(event){\r\n        event.persist();\r\n        this.setState({numberOfItems : event.target.value}, () => {\r\n            this.resetArray();\r\n            console.log(event.target.value + \" - \" + this.state.numberOfItems + \" - arraySize: \" + this.state.arrayToSort.length);\r\n        });\r\n        \r\n    }\r\n\r\n    handleDelayInputOnChange(event){\r\n        this.setState({delay : event.target.value});\r\n        \r\n    }\r\n\r\n    getColor(index){\r\n\r\n        let prevChanged = this.state.prevChanged;\r\n\r\n        if(prevChanged.includes(index)){\r\n            if(index == prevChanged[prevChanged.length - 1] || index == prevChanged[prevChanged.length - 2]){\r\n                return CHANGED_COLOR;\r\n            }\r\n            else{\r\n                return AFTER_CHANGE_COLOR;\r\n            }\r\n        }\r\n        else{\r\n            return NORMAL_COLOR;\r\n        }\r\n        \r\n    }\r\n\r\n\r\n    render() {\r\n        const {arrayToSort} = this.state;\r\n        let widthValue = 40 / this.state.numberOfItems;\r\n        return (\r\n            <div className=\"main-div\" id=\"centerdiv\">\r\n                <div className=\"centerdivKeepWidth\" id=\"itemsDiv\">\r\n                    {arrayToSort.map((heightValue, idx) => (\r\n                        <div className=\"array-item\" key={idx} style={{height: `${heightValue / 25}vw`, width: `${widthValue}vw`, backgroundColor: this.getColor(idx)}}>\r\n                            \r\n                        </div>\r\n                    ))}\r\n                </div>\r\n                <div className=\"centerdivKeepWidth\" id=\"buttonsDiv\">\r\n                    <button onClick={() => this.generateNewArray()}>Generate new array</button>\r\n                    <button onClick={() => this.SortArray(BubbleSort)}>Bubble Sort</button>\r\n                    <button onClick={() => this.SortArray(InsertionSort)}>Insertion Sort</button>\r\n                    <button onClick={() => this.selectionSort()}>Selection Sort</button>\r\n                    <button onClick={() => this.SortArray(GetQuickSortAnimation)}>Quick Sort</button>\r\n                </div>\r\n                <div className=\"flexDiv\">\r\n                    <div className=\"centerdivKeepWidth\">\r\n                        <label className=\"numberLabel\">Number of Items: </label>\r\n                        <input className=\"numberInput\" type=\"number\" min=\"5\" max=\"1500\" onChange={(event) => this.handleItemsInputOnChange(event)} defaultValue={this.state.numberOfItems}/>\r\n                    </div>\r\n                    <div className=\"centerdivKeepWidth\">\r\n                        <label className=\"numberLabel\">Delay: </label>\r\n                        <input className=\"numberInput\" type=\"number\" min=\"1\" max=\"100\" onChange={(event) => this.handleDelayInputOnChange(event)} defaultValue={this.state.delay}/>\r\n                    </div>\r\n                </div>\r\n            </ div>\r\n        );\r\n    }\r\n\r\n    RandomIntBetweenRange(min, max){\r\n        return Math.floor(Math.random() * (max - min + 1)) + min;\r\n    }\r\n}\r\n\r\nconst sleep = (milliseconds) => {\r\n    return new Promise(resolve => setTimeout(resolve, milliseconds))\r\n}",{"ruleId":"29","severity":1,"message":"30","line":6,"column":18,"nodeType":"31","messageId":"32","endLine":6,"endColumn":20},{"ruleId":"29","severity":1,"message":"33","line":9,"column":33,"nodeType":"31","messageId":"32","endLine":9,"endColumn":35},{"ruleId":"29","severity":1,"message":"33","line":62,"column":22,"nodeType":"31","messageId":"32","endLine":62,"endColumn":24},{"ruleId":"29","severity":1,"message":"33","line":90,"column":22,"nodeType":"31","messageId":"32","endLine":90,"endColumn":24},{"ruleId":"29","severity":1,"message":"33","line":120,"column":22,"nodeType":"31","messageId":"32","endLine":120,"endColumn":24},{"ruleId":"29","severity":1,"message":"33","line":120,"column":70,"nodeType":"31","messageId":"32","endLine":120,"endColumn":72},"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Expected '===' and instead saw '=='."]